# =================================================================
# FIAP Cloud Games (FCG) - Pipeline CD
# Deploy automático para Azure quando merge na main
# =================================================================

name: CD - Deploy to Azure

# Trigger: apenas na branch main
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permite execução manual

# Variáveis globais
env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: 'fgc-api'    # Nome do App Service
  AZURE_WEBAPP_PACKAGE_PATH: './publish'
  DOCKER_IMAGE_NAME: 'fgc-api'
  DOCKER_REGISTRY: 'docker.io'         # Docker Hub

jobs:
  # ===== JOB 1: BUILD & PUBLISH =====
  build:
    name: Build & Create Artifacts
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.version.outputs.image-tag }}

    steps:
    # Checkout
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Generate version
    - name: Generate Version
      id: version
      run: |
        VERSION="1.0.$(date +%Y%m%d).$(echo ${{ github.sha }} | cut -c1-7)"
        IMAGE_TAG="v${VERSION}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        echo "Image Tag: ${IMAGE_TAG}"

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Build & Publish
    - name: Build & Publish
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet publish FGC.Presentation/FGC.Presentation.csproj \
          --configuration Release \
          --no-build \
          --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    # Upload artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # ===== JOB 2: DOCKER BUILD & PUSH =====
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Setup Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login no Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build & Push Docker Image
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.build.outputs.version }}

  # ===== JOB 3: DEPLOY TO AZURE =====
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [build, docker]
    environment: production

    steps:
    # Download artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: webapp-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    # Login no Azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy para Azure App Service
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    # Ou Deploy via Container (alternativo)
    - name: Deploy Container to Azure
      if: false # Mude para true se quiser usar container
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}

  # ===== JOB 4: SMOKE TESTS =====
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Health Check
      run: |
        echo "Verificando saúde da aplicação..."
        
        # URL do seu App Service
        APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        # Aguardar aplicação iniciar
        sleep 30
        
        # Teste de health check
        for i in {1..5}; do
          echo "Tentativa $i/5..."
          if curl -f "${APP_URL}/health"; then
            echo "Health check OK!"
            break
          else
            echo "Health check falhou, tentando novamente..."
            sleep 10
          fi
        done
        
        # Teste básico da API
        echo "Testando endpoints básicos..."
        curl -f "${APP_URL}/api/users" || echo "Endpoint users não respondeu"

  # ===== JOB 5: NOTIFICATION =====
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: always()

    steps:
    - name: Success Notification
      if: needs.smoke-tests.result == 'success'
      run: |
        echo "DEPLOY REALIZADO COM SUCESSO!"
        echo "Versão: ${{ needs.build.outputs.version }}"
        echo "URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "Docker: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"

    - name: Failure Notification
      if: needs.deploy.result == 'failure' || needs.smoke-tests.result == 'failure'
      run: |
        echo "DEPLOY FALHOU!"
        echo "Verifique os logs para mais detalhes"