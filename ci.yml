# =================================================================
# FIAP Cloud Games (FCG) - Pipeline CI
# Executa testes automáticos em Pull Requests e Commits
# =================================================================

name: CI - Tests & Quality

# Triggers: quando executar
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Variáveis globais
env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # ===== JOB 1: BUILD & TEST =====
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    # Checkout do código
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup .NET 8
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache das dependências NuGet
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore das dependências
    - name: Restore Dependencies
      run: dotnet restore

    # Build da solução
    - name: Build Solution
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

    # Executar testes unitários
    - name: Run Unit Tests
      run: |
        dotnet test --no-build --configuration ${{ env.BUILD_CONFIGURATION }} \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/

    # Upload dos resultados de teste
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        retention-days: 30

    # Publicar resultados dos testes
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Tests Results
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx

  # ===== JOB 2: CODE ANALYSIS =====
  code-analysis:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore

    # Análise de código estático
    - name: Code Analysis
      run: |
        dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} \
          --verbosity normal \
          --property WarningsAsErrors=""

  # ===== JOB 3: DOCKER BUILD TEST =====
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Setup Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Test Docker build (sem push)
    - name: Test Docker Build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: fgc-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== JOB 4: SECURITY SCAN =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Scan de segurança com Trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    # Upload dos resultados de segurança
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===== STATUS FINAL =====
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [test, code-analysis, docker-test, security-scan]
    if: success()

    steps:
    - name: Success Message
      run: |
        echo "Todos os testes passaram!"
        echo "Build: OK"
        echo "Testes: OK" 
        echo "Docker: OK"
        echo "Segurança: OK"
        echo ""
        echo "Pull Request pronto para merge!"