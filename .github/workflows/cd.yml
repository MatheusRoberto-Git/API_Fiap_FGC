name: CD - Continuous Deployment

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY_NAME: 'fgcregistry'  # Substitua pelo nome do seu ACR
  IMAGE_NAME: 'fgc-api'

jobs:
  deploy:
    name: 🚀 Deploy to Azure
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🔄 Restore Dependencies
      run: dotnet restore
    
    - name: 🏗️ Build Solution
      run: dotnet build --configuration Release --no-restore
    
    - name: 🧪 Run Tests
      run: dotnet test --configuration Release --no-build
    
    - name: 🔐 Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🐳 Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
    
    - name: 🏷️ Generate Image Tags
      id: meta
      run: |
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT
        echo "FULL_IMAGE_NAME=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
    
    - name: 🐳 Build and Push Docker Image
      run: |
        # Build da imagem
        docker build -t ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.IMAGE_TAG }} .
        docker build -t ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.LATEST_TAG }} .
        
        # Push das imagens
        docker push ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.IMAGE_TAG }}
        docker push ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.LATEST_TAG }}
    
    - name: 🚀 Deploy to Azure Container Instance
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name fgc-api-container \
          --image ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:latest \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label fgc-api-v1 \
          --os-type Linux \
          --ports 8080 \
          --cpu 1 \
          --memory 2 \
          --restart-policy Always \
          --environment-variables \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:8080 \
            ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING }}" \
            Jwt__SecretKey="${{ secrets.JWT_SECRET_KEY }}" \
            Jwt__Issuer=FGC.API \
            Jwt__Audience=FGC.Client \
            Jwt__ExpireMinutes=120 \
            DD_API_KEY="${{ secrets.DATADOG_API_KEY }}" \
            DD_SITE=datadoghq.com \
            DD_ENV=production \
            DD_SERVICE=fgc-api
    
    - name: 📊 Get Deployment Info
      id: deployment-info
      run: |
        FQDN=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name fgc-api-container \
          --query ipAddress.fqdn -o tsv)
        echo "FQDN=${FQDN}" >> $GITHUB_OUTPUT
        echo "URL=http://${FQDN}:8080" >> $GITHUB_OUTPUT
    
    - name: 🏥 Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        # Fazer health check
        curl -f ${{ steps.deployment-info.outputs.URL }}/health || echo "Health check failed, but deployment completed"
    
    - name: 📝 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: ${{ steps.meta.outputs.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "**URL**: [${{ steps.deployment-info.outputs.URL }}](${{ steps.deployment-info.outputs.URL }})" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check**: [${{ steps.deployment-info.outputs.URL }}/health](${{ steps.deployment-info.outputs.URL }}/health)" >> $GITHUB_STEP_SUMMARY
        echo "**Swagger**: [${{ steps.deployment-info.outputs.URL }}/swagger](${{ steps.deployment-info.outputs.URL }}/swagger)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
    
    - name: 📧 Notify Datadog
      run: |
        # Enviar evento de deployment para o Datadog
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "FGC API Deployment",
          "text": "FGC API deployed successfully to Azure",
          "tags": ["env:production", "service:fgc-api", "version:${{ steps.meta.outputs.IMAGE_TAG }}"]
        }' || echo "Failed to notify Datadog"
